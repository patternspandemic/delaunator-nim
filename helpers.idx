normalDist	helpers.html#normalDist,int,float,float,Rand	helpers: normalDist[F](count: int; mu = 0.0; sigma = 1.0; r: var Rand = randState()): seq[\n    F]	
uniformDist	helpers.html#uniformDist,int,F,F,Rand	helpers: uniformDist[F](count: int; a: F; b: F; r: var Rand = randState()): seq[F]	
grid	helpers.html#grid,int,int,F,F,F,F,bool,bool,bool,bool,F,F,bool,Rand	helpers: grid[F](n, m: int; fromN, toN, fromM, toM: F;\n        leftEdge, rightEdge, topEdge, bottomEdge: bool = true;\n        jitterN, jitterM: F = 0.0; pinHull: bool = false;\n        r: var Rand = randState()): seq[F]	
zipPolarDists	helpers.html#zipPolarDists,openArray[F],openArray[F],F,F	helpers: zipPolarDists[F](r, t: openArray[F]; xOffset, yOffset: F = F(0.0)): seq[F]	
zipDists	helpers.html#zipDists,openArray[F],openArray[F]	helpers: zipDists[F](s1, s2: openArray[F]): seq[F]	
halfedgeIdsOfTriangle	helpers.html#halfedgeIdsOfTriangle,uint32	helpers: halfedgeIdsOfTriangle(tid: uint32): array[3, int32]	
triangleIdOfEdge	helpers.html#triangleIdOfEdge,int32	helpers: triangleIdOfEdge(eid: int32): uint32	
nextHalfedge	helpers.html#nextHalfedge,int32	helpers: nextHalfedge(eid: int32): int32	
prevHalfedge	helpers.html#prevHalfedge,int32	helpers: prevHalfedge(eid: int32): int32	
iterTriangleEdges	helpers.html#iterTriangleEdges.i,Delaunator[T]	helpers: iterTriangleEdges[T](d: Delaunator[T]): tuple[tid: uint32, eid: int32,\n    pid, qid: uint32, p, q: array[2, T]]	
pointIdsOfTriangle	helpers.html#pointIdsOfTriangle,Delaunator,uint32	helpers: pointIdsOfTriangle(d: Delaunator; tid: uint32): seq[uint32]	
iterTriangles	helpers.html#iterTriangles.i,Delaunator[T]	helpers: iterTriangles[T](d: Delaunator[T]): tuple[tid: uint32, pid, qid, rid: uint32,\n    p, q, r: array[2, T]]	
triangleIdsAdjacentToTriangle	helpers.html#triangleIdsAdjacentToTriangle,Delaunator,uint32	helpers: triangleIdsAdjacentToTriangle(d: Delaunator; tid: uint32): seq[uint32]	
triangleCentroid	helpers.html#triangleCentroid,Delaunator[T],uint32	helpers: triangleCentroid[T](d: Delaunator[T]; tid: uint32): array[2, T]	
polygonCentroid	helpers.html#polygonCentroid,seq[array[,T]]	helpers: polygonCentroid[T](polygon: seq[array[2, T]]): array[2, T]	
triangleCircumcenter	helpers.html#triangleCircumcenter,Delaunator[T],uint32	helpers: triangleCircumcenter[T](d: Delaunator[T]; tid: uint32): array[2, T]	
edgeIdsAroundPoint	helpers.html#edgeIdsAroundPoint,Delaunator,int32	helpers: edgeIdsAroundPoint(d: Delaunator; eid: int32): seq[int32]	
iterVoronoiEdges	helpers.html#iterVoronoiEdges.i,Delaunator[T]	helpers: iterVoronoiEdges[T](d: Delaunator[T]): tuple[eid: int32, p, q: array[2, T]]	
iterVoronoiRegions	helpers.html#iterVoronoiRegions.i,Delaunator[T]	helpers: iterVoronoiRegions[T](d: Delaunator[T]): tuple[pid: uint32,\n    verts: seq[array[2, T]]]	
voronoiRegion	helpers.html#voronoiRegion,Delaunator[T],uint32	helpers: voronoiRegion[T](d: Delaunator[T]; pid: uint32): tuple[pid: uint32,\n    verts: seq[array[2, T]]]	
iterPoints	helpers.html#iterPoints.i,Delaunator[T]	helpers: iterPoints[T](d: Delaunator[T]): tuple[pid: uint32, p: array[2, T]]	
iterHullPoints	helpers.html#iterHullPoints.i,Delaunator[T]	helpers: iterHullPoints[T](d: Delaunator[T]): tuple[hid: uint32, pid: uint32,\n    p: array[2, T]]	
iterHullEdges	helpers.html#iterHullEdges.i,Delaunator[T]	helpers: iterHullEdges[T](d: Delaunator[T]): tuple[hid: uint32, eid: int32,\n    pid, qid: uint32, p, q: array[2, T]]	
